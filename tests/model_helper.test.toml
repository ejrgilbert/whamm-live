[alphabet]
test="inject_wat"
original = ["a", "d", "e", "f", "j"]
number_of_lines_injected=5
number_of_injections = 4
injection_1 = {code=["b", "c"], range=[2,3]}
injection_2 = {code=["g"], range=[7,7]}
injection_3 = {code=["h"], range=[8,8]}
injection_4 = {code=["i"], range=[9,9]}
expected = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]

[number]
test="inject_wat"
original = ["9", "10"]
number_of_lines_injected=8
number_of_injections = 4
injection_1 = {code=["1", "2", "3"], range=[1,3]}
injection_2 = {code=["4", "5"], range=[4,5]}
injection_3 = {code=["6"], range=[6,6]}
injection_4 = {code=["7", "8"], range=[7,8]}
expected = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]

[no_original]
test="inject_wat"
original = []
number_of_lines_injected=10
number_of_injections = 3 
injection_1 = {code=["1"], range=[1,1]}
injection_2 = {code=["2", "3", "4", "5", "6"], range=[2,6]}
injection_3 = {code=["7", "8", "9", "10"], range=[7,10]}
expected = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]

[no_injected]
test="inject_wat"
original = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
number_of_lines_injected=0
number_of_injections = 0
expected = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]

[one_injected]
test="inject_wat"
original = ["1", "2", "3", "4", "5", "6", "7", "8"]
number_of_lines_injected=2
number_of_injections = 1 
injection_1 = {code=["9", "10"], range=[9,10]}
expected = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]

[jagged_array_one]
test="create_jagged_array"
content="12345\n678\n9\n1011"
number_of_rows=4
number_of_cols = [5,3,1,4]

[jagged_array_two]
test="create_jagged_array"
content="\n12345\n"
number_of_rows=3
number_of_cols = [0,5,0]

[jagged_array_three]
test="create_jagged_array"
content="\n12345\n\n\n67\n9\n1011"
number_of_rows=7
number_of_cols = [0,5,0,0,2,1,4]

##
## TODO: Upon Orca funcID fix
## { Remove `number_of_import_functions_injected` from each test="create_whamm_live_injection_instances" }
##
[whamm_live_injection_instance_one]
test="create_whamm_live_injection_instances"
app="hello.wat"
script="script.mm"
number_of_import_functions_injected=13

[whamm_live_injection_instance_two]
test="create_whamm_live_injection_instances"
app="functions.wat"
script="script.mm"
number_of_import_functions_injected=13

[whamm_live_injection_instance_three]
test="create_whamm_live_injection_instances"
app="app.wat"
script="script.mm"
number_of_import_functions_injected=13

[whamm_live_injection_instance_four]
test="create_whamm_live_injection_instances"
app="app.wat"
script="branch_monitor.mm"
number_of_import_functions_injected=13

[whamm_live_injection_instance_five]
test="create_whamm_live_injection_instances"
app="loops.wat"
script="branch_monitor.mm"
number_of_import_functions_injected=13

[whamm_live_injection_instance_six]
test="create_whamm_live_injection_instances"
app="app.wat"
script="global_map.mm"
number_of_import_functions_injected=62

[whamm_live_injection_instance_seven]
test="create_whamm_live_injection_instances"
app="loops.wat"
script="global_map.mm"
number_of_import_functions_injected=62

[span_size_1]
test="calculate_span_values_and_size"
lc0={l=1, c=1}
lc1={l=3, c=5}
# String content is what is used to create the jagged array
string_contents="abcdef\nghi\njklmnop"
span_size=13
# these values mean Line 1 goes from (1-7(exclusibe)) so: col 1 to col 6
# line 2 goes from col 1 to 3 and line 3 goes from col 1 to 4
# So, the valid line, col pairs for this would be [(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),
#                                                   (2,1),(2,2),(2,3),(3,1),(3,2),(3,3),(3,4)]
line_col_values={1=[1,7], 2=[1,4], 3=[1,5]}

[span_size_2]
test="calculate_span_values_and_size"
lc0={l=1, c=1}
lc1={l=4, c=5}
string_contents="abcdef\ng\nhi\njklmnop"
span_size=13
line_col_values={1=[1,7], 2=[1,2], 3=[1,3], 4=[1,5]}

[span_size_3]
test="calculate_span_values_and_size"
lc0={l=1, c=3}
lc1={l=4, c=1}
string_contents="abcdef\ng\nhi\njklmnop"
span_size=7
line_col_values={1=[3,7], 2=[1,2], 3=[1,3]}

[span_size_4]
test="calculate_span_values_and_size"
lc0={l=1, c=3}
lc1={l=8, c=2}
string_contents="abcdef\n\n\nabcde\n\ng\nhi\njklmnop"
span_size=13
line_col_values={1=[3,7], 4=[1,6], 6=[1,2], 7=[1,3], 8=[1,2]}

[span_size_5]
test="calculate_span_values_and_size"
lc0={l=4, c=3}
lc1={l=4, c=4}
string_contents="\n\n\nabcdef\n\n\njklmnop"
span_size=1
line_col_values={4=[3,4]}

[span_size_6]
test="calculate_span_values_and_size"
lc0={l=2, c=1}
lc1={l=1, c=1}
string_contents="abcd\ndef"
span_size=0
line_col_values={}

[span_size_7]
test="calculate_span_values_and_size"
lc0={l=1, c=3}
lc1={l=1, c=1}
string_contents="abcd\ndef"
span_size=0
line_col_values={}