// wit/whamm-server.wit
package vscode:example;

interface types {
	
	enum inject-type {
		type-inject,
		import-inject,
		export-inject,
		memory-inject,
		data-inject,
		global-inject,
		func-inject,
		local-inject,
		table-inject,
		element-inject,
		probe-inject
	}
	
	record options {
		as-monitor-module: bool
	}

	enum mode {
		before,
		after,
		alt,
		entry,
		exit
	}

	record script-loc {
		l: u32,
		c: u32
	}

	record app-loc {
		byte-offset: u64,
		mode: mode
	}
	
	record probe {
    	app-loc: app-loc,
		script-loc: script-loc,
		wat: string
	}

	variant error-code {
		invalid(string),
		unexpected(string),
		no-change(string)
	}
	
	variant line-col-location{
		pos(tuple<u64, u64>),
		span(tuple<tuple<u64, u64>, tuple<u64, u64>>)
	}

	record code-location{
		is-err: bool,
		message: option<string>,
		line-col: line-col-location,
		line-str: option<string>,
		line2-str: option<string>,
	}

	record whamm-error {
    	match-rule: option<string>,
    	fatal: bool,
    	err-loc: option<code-location>,
    	info-loc: option<code-location>,
    	ty: string,
	}
}

world whamm-server {
	use types.{ options, probe, error-code};
	import log: func(msg: string);

	export setup: func(app-name: string, app-bytes: list<u8>, opts: options) -> result<string, error-code>;
	export run: func(script: string, app-name: string, script-path: string) -> result<list<probe>, error-code>;
	export wat2wat: func(content: string) -> result<string, error-code>;
	export wasm2wat: func(content: list<u8>) -> result<string, error-code>;
}