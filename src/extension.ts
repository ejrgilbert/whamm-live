/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import * as vscode from 'vscode';
import { WasmContext, Memory, Options } from '@vscode/wasm-component-model';

// Import the code generated by wit2ts
import { Types, whammServer } from './whammServer';

export async function activate(context: vscode.ExtensionContext): Promise<void> {
	// The channel for printing the result.
	const channel = vscode.window.createOutputChannel('WhammServer');
	context.subscriptions.push(channel);

	// The channel for printing the log.
	const log = vscode.window.createOutputChannel('WhammServer - Log', { log: true });
	context.subscriptions.push(log);

	// Load the Wasm module
	const filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'whamm_server.wasm');
	const bits = await vscode.workspace.fs.readFile(filename);
	const module = await WebAssembly.compile(bits);

	// The implementation of the log function that is called from WASM
	const service: whammServer.Imports = {
		log: (msg: string) => {
			log.info(msg);
		}
	};

	// The context for the WASM module
	const wasmContext: WasmContext.Default = new WasmContext.Default();

	// Create the bindings to import the log function into the WASM module
	const imports = whammServer._.imports.create(service, wasmContext);
	// Instantiate the module
	const instance = await WebAssembly.instantiate(module, imports);

	// Bind the WASM memory to the context
	wasmContext.initialize(new Memory.Default(instance.exports));

	// Bind the TypeScript Api
	const api = whammServer._.exports.bind(instance.exports as whammServer._.Exports, wasmContext);

	context.subscriptions.push(vscode.commands.registerCommand('vscode-samples.wasm-component-model.run', () => {
		channel.show();
		channel.appendLine('Running WhammServer example');
		try {
			api.setup("app.wasm", "script.mm", {asMonitorModule: false});
		} catch (error) {
			channel.appendLine(`whamm setup failed: ${error}`);
			// if (error instanceof Types.ErrorCode.Error_ && error.cause === Types.ErrorCode.divideByZero) {
			// 	channel.appendLine('Division by zero not allowed');
			// }
		}

		// TODO: this should be split out to a different async func callback!
		try {
			printProbe(api.run(), channel);
		} catch (error) {
			channel.appendLine(`whamm run failed: ${error}`);
			// if (error instanceof Types.ErrorCode.Error_ && error.cause === Types.ErrorCode.divideByZero) {
			// 	channel.appendLine('Division by zero not allowed');
			// }
		}
	}));
}

function printProbe(probes: Types.Probe[], channel: vscode.OutputChannel) {
	probes.forEach ( ({
		appLoc,
		scriptLoc,
		wat
	}, i) => {
		channel.appendLine(`probe${i}:`);
		channel.appendLine(`  app_loc -> ${appLoc.byteOffset}:${appLoc.mode.tag}`);
		channel.appendLine(`  script_loc -> ${scriptLoc.l}:${scriptLoc.c}`);
		channel.appendLine(`  wat -> ${wat}`);
	});
}